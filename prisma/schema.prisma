generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id                 String         @id @default(cuid())
  location           String?
  url                String?
  description        String?
  color              String?        @default("blue")
  protected          Boolean        @default(false)
  verified           Boolean        @default(false)
  email              String?        @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  created_at         DateTime       @default(now())
  followers_count    Int            @default(0)
  friends_count      Int            @default(0)
  favorites_count    Int            @default(0)
  statuses_count     Int            @default(0)
  profile_banner_url String?
  pinned_post_id     String?
  role               UserRole       @default(USER)
  bookmarks          Bookmark[]
  likes              Like[]
  sent_messages      Message[]      @relation("receiver")
  received_messages  Message[]      @relation("sender")
  reposts            Repost[]
  posts              Post[]
  pinned_post        Post?          @relation("pinned_post", fields: [pinned_post_id], references: [id])
  conversations      Conversation[] @relation("ConversationToUser")
  followers          Profile[]      @relation("Followers")
  following          Profile[]      @relation("Followers")
  feedbacks          Feedback[]
}

model Post {
  id                    String     @id @default(cuid())
  text                  String?
  source                String     @default("web")
  in_reply_to_user_id   String?
  in_reply_to_username  String?
  is_quote_status       Boolean    @default(false)
  quoted_status_id      String?
  quote_count           Int        @default(0)
  reply_count           Int        @default(0)
  repost_count          Int        @default(0)
  favorite_count        Int        @default(0)
  possibly_sensitive    Boolean    @default(false)
  lang                  String     @default("en")
  created_at            DateTime   @default(now())
  quoted_post_id        String?
  in_reply_to_status_id String?
  author_id             String
  bookmarks             Bookmark[]
  likes                 Like[]
  media                 Media[]
  reposts               Repost[]
  author                Profile    @relation(fields: [author_id], references: [id], onDelete: Cascade)
  post_comment          Post?      @relation("post-comment", fields: [in_reply_to_status_id], references: [id])
  comments              Post[]     @relation("post-comment")
  quoted_post           Post?      @relation("quoted_post", fields: [quoted_post_id], references: [id])
  quotes                Post[]     @relation("quoted_post")
  pinned_by_users       Profile[]  @relation("pinned_post")
}

model Media {
  id         String  @id @default(cuid())
  media_url  String
  media_type String
  media_path String
  post_id    String?
  post       Post?   @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model Like {
  id         String   @id @default(cuid())
  post_id    String
  user_id    String
  created_at DateTime @default(now())
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user       Profile  @relation(fields: [user_id], references: [id])
}

model Repost {
  id         String   @id @default(cuid())
  post_id    String
  user_id    String
  created_at DateTime @default(now())
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user       Profile  @relation(fields: [user_id], references: [id])
}

model Bookmark {
  id         String   @id @default(cuid())
  post_id    String
  user_id    String
  created_at DateTime @default(now())
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user       Profile  @relation(fields: [user_id], references: [id])
}

model Hashtag {
  id         String   @id @default(cuid())
  text       String
  hashtag    String   @unique
  score      Int      @default(1)
  created_at DateTime @default(now())
}

model Message {
  id              String       @id @default(cuid())
  text            String?
  image           String?
  created_at      DateTime     @default(now())
  sender_id       String
  receiver_id     String
  conversation_id String
  status          String       @default("sent")
  image_height    Int?
  image_width     Int?
  conversation    Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  receiver        Profile      @relation("receiver", fields: [receiver_id], references: [id], onDelete: Cascade)
  sender          Profile      @relation("sender", fields: [sender_id], references: [id], onDelete: Cascade)
}

model Conversation {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  messages   Message[]
  users      Profile[] @relation("ConversationToUser")
}

model Feedback {
  id        String   @id @default(cuid())
  message   String
  createdAt DateTime @default(now())
  user      Profile  @relation(fields: [userId], references: [id])
  userId    String
}

enum UserRole {
  ADMIN
  USER
}
